// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reservationgrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ReservationClient is the client API for Reservation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationClient interface {
	TryGetReservation(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*TryGetReservationResponse, error)
}

type reservationClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationClient(cc grpc.ClientConnInterface) ReservationClient {
	return &reservationClient{cc}
}

var reservationTryGetReservationStreamDesc = &grpc.StreamDesc{
	StreamName: "TryGetReservation",
}

func (c *reservationClient) TryGetReservation(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*TryGetReservationResponse, error) {
	out := new(TryGetReservationResponse)
	err := c.cc.Invoke(ctx, "/reservationgrpc.Reservation/TryGetReservation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationService is the service API for Reservation service.
// Fields should be assigned to their respective handler implementations only before
// RegisterReservationService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type ReservationService struct {
	TryGetReservation func(context.Context, *Credentials) (*TryGetReservationResponse, error)
}

func (s *ReservationService) tryGetReservation(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.TryGetReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/reservationgrpc.Reservation/TryGetReservation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.TryGetReservation(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterReservationService registers a service implementation with a gRPC server.
func RegisterReservationService(s grpc.ServiceRegistrar, srv *ReservationService) {
	srvCopy := *srv
	if srvCopy.TryGetReservation == nil {
		srvCopy.TryGetReservation = func(context.Context, *Credentials) (*TryGetReservationResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method TryGetReservation not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "reservationgrpc.Reservation",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "TryGetReservation",
				Handler:    srvCopy.tryGetReservation,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "reservation-service_v1.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewReservationService creates a new ReservationService containing the
// implemented methods of the Reservation service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewReservationService(s interface{}) *ReservationService {
	ns := &ReservationService{}
	if h, ok := s.(interface {
		TryGetReservation(context.Context, *Credentials) (*TryGetReservationResponse, error)
	}); ok {
		ns.TryGetReservation = h.TryGetReservation
	}
	return ns
}

// UnstableReservationService is the service API for Reservation service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableReservationService interface {
	TryGetReservation(context.Context, *Credentials) (*TryGetReservationResponse, error)
}
